# src/main/resources/application.yml
spring:
  application:
    name: openfilz-api
  threads:
    virtual:
      enabled: true
  r2dbc:
    url: r2dbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:dms_db}
    username: ${DB_USER:dms_user}
    password: ${DB_PASSWORD:dms_password}
    initialization-mode: always
    pool:
      enabled: true
      initial-size: 5
      max-size: 10

  security:
    no-auth: true # No authentication required
    # custom-roles: default false - if true : you can provide a custom implementation of org.openfilz.dms.config.DefaultAuthSecurityConfig and org.openfilz.dms.service.impl.SecurityServiceImpl
    cors-allowed-origins: ${CORS_ALLOWED_URLS:} # Comma-separated list of authorized origins
    # role-token-lookup: GROUPS or REALM_ACCESS (default value) : optional value used in org.openfilz.dms.service.impl.AbstractSecurityService to retrieve Role information from Groups or from the Realm_access
    # role-token-lookup: GROUPS
    # root-group: name of the root group holding the 3 Roles as subgroups : eg. 'GED' is the root group in the group /GED/AUDITORS
    # root-group: GED
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ISSUER_URI:http://localhost:8080/realms/your-realm} # e.g., http://localhost:8080/realms/test-realm
          # jwk-set-uri: ${KEYCLOAK_JWK_SET_URI:http://localhost:8080/realms/test-realm/protocol/openid-connect/certs} # Often derived from issuer-uri

  sql:
    init:
      mode: always

  graphql:
    http:
      path: /graphql/v1

# Storage Configuration
storage:
  type: local # local or minio
  local:
    base-path: /tmp/dms-storage
  minio:
    endpoint: ${MINIO_ENDPOINT:http://localhost:9000}
    access-key: ${MINIO_ACCESS_KEY:minioadmin}
    secret-key: ${MINIO_SECRET_KEY:minioadmin}
    bucket-name: ${MINIO_BUCKET_NAME:dms-bucket}

# Swagger / OpenAPI
openapi:
  service:
    title: openfilz-api
    url: ${API_ROOT_URL:http://localhost:8081/} # put http://localhost:8081/ for standalone usage & http://localhost:8888/dms-api if the openfilz-gateway is used
    version: 1.0.0

springdoc:
  api-docs:
    path: /v3/api-docs # put /v3/api-docs for standalone usage & /dms-api/v3/api-docs if the openfilz-gateway is used
  swagger-ui:
    path: /swagger-ui.html # put /swagger-ui.html for standalone usage & /dms-api/swagger-ui.html if the openfilz-gateway is used

# Logging for auditing (can be more sophisticated)
logging:
  level:
    org.openfilz: DEBUG
    # io.r2dbc.postgresql.QUERY: DEBUG # for queries
    # io.r2dbc.postgresql.PARAM: DEBUG # for parameters
    # org.springframework: DEBUG

server:
  port: 8081

# Buffer size for PipedInputStreams
piped:
  buffer:
    size: 8192


# Database schema initialization (e.g., Flyway or Liquibase if preferred)
# For simple R2DBC, you might use an InitializingBean to create tables
# Example:
# spring.sql.init.mode=always
# spring.sql.init.schema-locations=classpath:schema.sql
